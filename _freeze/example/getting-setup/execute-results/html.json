{
  "hash": "259d1cbf213d817daab7e70e95305aa9",
  "result": {
    "markdown": "---\ntitle: \"Getting Setup\"\n---\n\n\n## Let's \"git\" started\n\nWe are using GitHub classroom for all of the assignments in this course. This allows each of you to have your own repositories for version control and backup of your code without the worries of stepping on someone else toes. The goal of this class is not to have you become a 'master' of all things git, but I am hoping you'll learn the utility of version control and adopt as much of it as make sense for you and your workflows. \n\n### Accept the invitation to the assignment repo\n\nThe first thing you'll need to do is accept the invitation to 'assignment-1` repository (repo). This _should_ automatically clone (make an exact copy) of the assignment repo in your personal account. \n\n### Making sure Rstudio server can access your GitHub account\n\nUnfortunately, GitHub has ended its support for username/password remote authentication. Instead, it uses something called a Personal Access Token. You can read more about it [here](https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token) if you are interested, but the easiest way to deal with this is by following Jenny Bryan's [happygitwithr](https://happygitwithr.com/credential-caching.html#credential-caching) recommended approach:\n\n1. Introduce yourself to git: \nThere are a number of ways to do this, but I find this to be the easiest\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usethis) #you may need to install this using install.packages('usethis')\nuse_git_config(user.name = \"Jane Doe\", user.email = \"jane@example.org\") #your info here\n```\n:::\n\n\n2. Get a PAT if you don't have one already (make sure you save it somewhere)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\n3. Store your credential for use in RStudio\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gitcreds) #may need to install this too\n\ngitcreds_set() #should prompt you for your pat - paste it here\n```\n:::\n\n\n4. Verify that Rstudio has saved your credential\n\n::: {.cell}\n\n```{.r .cell-code}\ngitcreds_get()\n```\n:::\n\n\nR should return something that looks like this:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/01/credentialsuccess.png){width=70%}\n:::\n:::\n\n\n### Bring the project into RStudio\n\n2. Go to File>New Project and choose the \"Version Control\" option\n3. Select \"Git\" (Not Subversion)\n4. paste the link from the \"Clone Repository\" button into the \"Repository URL\" space\n\n### Verify that the \"Git\" tab is available and that your project is shown in the upper right-hand corner\n\nAssuming all this has worked, you should be able to click on the \"Git\" tab and see something like this:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](img/01/gittab.png){width=70%}\n:::\n:::\n\n\n### Basic workflow\n\n1. Everytime you begin working on code, make sure you \"Pull\" from the remote repository to make sure you have the most recent version of things (this is especially important when you are collaborating with people).\n\n2. Make some changes to code\n\n3. Save those changes\n\n4. \"Commit\" those changes - Think of commits as 'breadcrumbs' they help you remember where you were in the coding process in case you need to revert back to a previous version. Your commit messages should help you remember what was 'happening' in the code when you made the commit. In general, you should save and commit fairly frequently and especially everytime you do something 'consequential'. Git allows you to 'turn back time', but that's only useful if you left enough information to get back to where you want to be.\n\n5. Push your work to the remote - when you're done working on the project for the day, push your local changes to the remote. This will ensure that if you switch computers or if someone else is going to work on the project, you (or they) will have the most recent version. Plus, if you don't do this, step 1 will really mess you up.\n\n## Quarto\n\nThis is a [Quarto document](https://quarto.org/docs/get-started/authoring/rstudio.html) (in fact, this whole webpage and all of the slides were built with Quarto). Quarto uses the `knitr` package to render files containing `R`, `python`, and `julia` to  [Markdown](https://daringfireball.net/projects/markdown/) as a means of rendering code, text, math, figures, and tables to a variety of formats.\n\n![](/example/img/01/rstudio_qmd_workflow.png){.border fig-alt=\"Workflow diagram starting with a qmd file, then knitr, then md, then pandoc, then PDF, MS Word, or HTML.\" fig-align=\"center\"}\n\nMarkdown is a simple formatting syntax for authoring HTML documents (it's the basis for the Readme docs that GitHub creates for you). From there, `RStudio` calls [pandoc](https://pandoc.org/) to render the markdown file into your chosen output format. **I'm telling you this because there will be times when some part of this pipeline may break and you'll need to know where the errors might be coming from.**\n\nYou can create new Quarto documents by going to File >> New File >> New Quarto Document (or Presentation). There are lots of new documents devoted to [Quarto](https://quarto.org/), but some of them may assume you have some familiarity with `Markdown` or `Rmarkdown`. As such, I'm keeping this links to helpful Rmarkdown resources like this [cheatsheet](https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf) and a much longer [user's guide](https://bookdown.org/yihui/rmarkdown/) in case you need more in-depth discussion of some of the ideas behind authoring in Quarto. I don't expect you to become an expert in Quarto, but it is a helpful way to keep all of your thoughts and code together in a single, coherent document. Getting proficient in Quarto and git allows you to work with collaborators on an analysis, graphics, and manuscript all within a single platform. This fully-integrated workflow takes practice and patience (especially when you have collaborators that are new to this approach), this course is just an initial step down that path. I'll do my best to keep it simple - please let me know if you have questions! \n\n## The Example\n\n### Setup \n\nThe University of Exeter has been conducting an [ongoing survey](https://exeterssis.eu.qualtrics.com/jfe/form/SV_3fOLbEP4wVLDn2R) to understand the age at which the belief in Santa Claus begins to drop off. A sample of the data is located in your `assignment01` folder. Our task is to bring the data into R, conduct some preliminary exploration of the data, and then fit a model to the data to see if age predicts belief in Santa. We'll start by branching off of the `master` Quarto doc in our GitHub repo and then work through the steps together. \n\n### Pseudocode\n\nBefore we get started, let's sketch out the steps in our analysis using pseudocode.\n\n\n::: {.cell}\n\n:::\n\n\n### Programming\n\nNow that we have the basic steps in place, let's transform the pseudocode into a repeatable Quarto document that explains what we're doing, why, and what we found.\n\n### Rendering the document\n\nWhen you click the **Render** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. \n\n\n\n",
    "supporting": [
      "getting-setup_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}